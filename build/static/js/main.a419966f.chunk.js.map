{"version":3,"sources":["Nutriment.js","Recette.js","App.js","serviceWorker.js","index.js"],"names":["Nutriment","_ref","label","quantite","unit","react_default","a","createElement","Recette","titre","calories","lipides","glucides","proteines","image","url","ingredients","className","href","Math","floor","src_Nutriment","quantity","src","alt","App","_useState","useState","_useState2","Object","slicedToArray","recettes","setRecettes","_useState3","_useState4","query","setQuery","_useState5","_useState6","search","setSearch","_useState7","_useState8","diet","setDiet","request","concat","process","updateDiet","value","console","log","useEffect","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","sent","json","hits","stop","apply","this","arguments","getData","onSubmit","e","preventDefault","type","onChange","target","htmlFor","name","id","onClick","map","recette","index","src_Recette","key","recipe","totalNutrients","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAWeA,EATE,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,MAAMC,EAAiBF,EAAjBE,SAASC,EAAQH,EAARG,KAC9B,OACIC,EAAAC,EAAAC,cAAA,SACCL,EADD,IAECC,EAAUC,ICkCJI,SApCC,SAAAP,GASV,IARJQ,EAQIR,EARJQ,MACAC,EAOIT,EAPJS,SACAC,EAMIV,EANJU,QACAC,EAKIX,EALJW,SACAC,EAIIZ,EAJJY,UACAC,EAGIb,EAHJa,MACAC,EAEId,EAFJc,IAEId,EADJe,YAEA,OACEX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,UACbZ,EAAAC,EAAAC,cAAA,KAAGW,KAAMH,GACPV,EAAAC,EAAAC,cAAA,UAAKE,IAEPJ,EAAAC,EAAAC,cAAA,gCAAwBY,KAAKC,MAAMV,IACnCL,EAAAC,EAAAC,cAACc,EAAD,CACEnB,MAAOU,EAASV,MAChBC,SAAUgB,KAAKC,MAAMR,EAASU,UAC9BlB,KAAMQ,EAASR,OAEjBC,EAAAC,EAAAC,cAACc,EAAD,CACEnB,MAAOW,EAAUX,MACjBC,SAAUgB,KAAKC,MAAMP,EAAUS,UAC/BlB,KAAMS,EAAUT,OAElBC,EAAAC,EAAAC,cAACc,EAAD,CACEnB,MAAOS,EAAQT,MACfC,SAAUgB,KAAKC,MAAMT,EAAQW,UAC7BlB,KAAMO,EAAQP,OAGhBC,EAAAC,EAAAC,cAAA,OAAKgB,IAAKT,EAAOU,IAAI,SCoEZC,SApGH,WACV,IADgBC,EAIgBC,mBAAS,IAJzBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAITK,EAJSH,EAAA,GAICI,EAJDJ,EAAA,GAAAK,EAKUN,mBAAS,QALnBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAKTE,EALSD,EAAA,GAKFE,EALEF,EAAA,GAAAG,EAMYV,mBAAS,IANrBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAMTE,EANSD,EAAA,GAMDE,EANCF,EAAA,GAAAG,EAOQd,mBAAS,YAPjBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAOTE,EAPSD,EAAA,GAOHE,EAPGF,EAAA,GAQVG,EAAO,mCAAAC,OAAsCX,EAAtC,YAAAW,OANEC,WAMF,aAAAD,OAPEC,mCAOF,UAAAD,OAAuFH,GAa9FK,EAAa,SAACC,GACL,MAATA,IACFL,EAAQK,GACRC,QAAQC,IAAIN,KAiBhB,OAbAO,oBACE,YACe,eAAAnD,EAAA4B,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAhD,EAAAiD,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAhD,EAAAqD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSC,MAAMlB,GADf,cACRY,EADQG,EAAAI,KAAAJ,EAAAE,KAAA,EAEKL,EAASQ,OAFd,OAERP,EAFQE,EAAAI,KAGdd,QAAQC,IAAIO,EAAKQ,MACjBlC,EAAY0B,EAAKQ,MAJH,wBAAAN,EAAAO,SAAAX,MAAH,yBAAAvD,EAAAmE,MAAAC,KAAAC,YAAA,EAMbC,IAEF,CAAC1B,IAIDxC,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,SACbZ,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAAA,QAAMU,UAAU,cAAcuD,SA/Bd,SAACC,GACnBA,EAAEC,iBACFtC,EAASG,GACTC,EAAU,MA6BNnC,EAAAC,EAAAC,cAAA,SACEU,UAAU,aACV0D,KAAK,OACL1B,MAAOV,EACPqC,SAzCa,SAACH,GACpBjC,EAAUiC,EAAEI,OAAO5B,OACnBC,QAAQC,IAAIZ,MAyCRlC,EAAAC,EAAAC,cAAA,UAAQU,UAAU,gBAAgB0D,KAAK,UAAvC,cAGAtE,EAAAC,EAAAC,cAAA,SAAOuE,QAAS,YAAhB,iBACAzE,EAAAC,EAAAC,cAAA,SACEoE,KAAM,QACNI,KAAK,WACL9B,MAAM,WACN+B,GAAI,WACJC,QAAS,kBAAMjC,EAAW,eAE5B3C,EAAAC,EAAAC,cAAA,SAAOuE,QAAQ,gBAAf,qBACAzE,EAAAC,EAAAC,cAAA,SACEoE,KAAM,QACNI,KAAK,WACL9B,MAAO,eACP+B,GAAG,eACHC,QAAS,kBAAMjC,EAAW,mBAE5B3C,EAAAC,EAAAC,cAAA,SAAOuE,QAAQ,WAAf,gBACAzE,EAAAC,EAAAC,cAAA,SACEoE,KAAM,QACNI,KAAK,WACL9B,MAAO,UACP+B,GAAG,UACHC,QAAS,kBAAMjC,EAAW,eAG9B3C,EAAAC,EAAAC,cAAA,OAAKU,UAAU,YACZc,EAASmD,IAAI,SAACC,EAASC,GAAV,OACZ/E,EAAAC,EAAAC,cAAC8E,EAAD,CACEC,IAAKF,EACL3E,MAAO0E,EAAQI,OAAOrF,MACtBQ,SAAUyE,EAAQI,OAAO7E,SACzBE,SAAUuE,EAAQI,OAAOC,eAAf,OACV3E,UAAWsE,EAAQI,OAAOC,eAAf,OACX7E,QAASwE,EAAQI,OAAOC,eAAf,IACT1E,MAAOqE,EAAQI,OAAOzE,MACtBC,IAAKoE,EAAQI,OAAOxE,IACpBC,YAAamE,EAAQI,OAAOvE,oBCpFpByE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1F,EAAAC,EAAAC,cAACyF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a419966f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Nutriment =({label,quantite,unit})=>{\r\n    return(\r\n        <p>\r\n        {label}:\r\n        {quantite}{unit}\r\n        </p>\r\n    );\r\n\r\n};\r\nexport default Nutriment;","import React from \"react\";\r\nimport Nutriment from \"./Nutriment\";\r\nimport \"./recette.modules.css\";\r\n\r\nconst Recette = ({\r\n  titre,\r\n  calories,\r\n  lipides,\r\n  glucides,\r\n  proteines,\r\n  image,\r\n  url,\r\n  ingredients,\r\n}) => {\r\n  return (\r\n    <div className=\"recipe\">\r\n      <a href={url}>\r\n        <h1>{titre}</h1>\r\n      </a>\r\n      <p>Nombre de calories :{Math.floor(calories)}</p>\r\n      <Nutriment\r\n        label={glucides.label}\r\n        quantite={Math.floor(glucides.quantity)}\r\n        unit={glucides.unit}\r\n      />\r\n      <Nutriment\r\n        label={proteines.label}\r\n        quantite={Math.floor(proteines.quantity)}\r\n        unit={proteines.unit}\r\n      />\r\n      <Nutriment\r\n        label={lipides.label}\r\n        quantite={Math.floor(lipides.quantity)}\r\n        unit={lipides.unit}\r\n      />\r\n\r\n      <img src={image} alt=\" \"></img>\r\n    </div>\r\n  );\r\n};\r\nexport default Recette;\r\n","import React, { useEffect, useState } from \"react\";\nimport Recette from \"./Recette\";\nimport \"./App.css\";\n\nconst App = () => {\n  const KEY_ID = process.env.REACT_APP_KEY_ID;\n  const APP_ID = process.env.REACT_APP_APP_ID;\n\n  const [recettes, setRecettes] = useState([]);\n  const [query, setQuery] = useState(\"beef\");\n  const [search, setSearch] = useState(\"\");\n  const [diet, setDiet] = useState(\"balanced\");\n  const request = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${KEY_ID}&diet=${diet}`;\n\n  const updatesearch = (e) => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n\n  const updateQuery = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  const updateDiet = (value) => {\n    if (value != null) {\n      setDiet(value);\n      console.log(request);\n    }\n  };\n\n  useEffect(\n    function () {\n      const getData = async () => {\n        const response = await fetch(request);\n        const data = await response.json();\n        console.log(data.hits);\n        setRecettes(data.hits);\n      };\n      getData();\n    },\n    [request]\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"Title\">\n        <h1>Recettes Healhty</h1>\n      </div>\n      <form className=\"search-form\" onSubmit={updateQuery}>\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updatesearch}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Rechercher\n        </button>\n        <label htmlFor={\"balenced\"}>Balenced diet</label>\n        <input\n          type={\"radio\"}\n          name=\"dietType\"\n          value=\"balanced\"\n          id={\"balenced\"}\n          onClick={() => updateDiet(\"balenced\")}\n        ></input>\n        <label htmlFor=\"high_protein\">High protein diet</label>\n        <input\n          type={\"radio\"}\n          name=\"dietType\"\n          value={\"high-protein\"}\n          id=\"high_protein\"\n          onClick={() => updateDiet(\"high-protein\")}\n        ></input>\n        <label htmlFor=\"low-fat\">Low Fat diet</label>\n        <input\n          type={\"radio\"}\n          name=\"dietType\"\n          value={\"low-fat\"}\n          id=\"low-fat\"\n          onClick={() => updateDiet(\"low-fat\")}\n        ></input>\n      </form>\n      <div className=\"recettes\">\n        {recettes.map((recette, index) => (\n          <Recette\n            key={index}\n            titre={recette.recipe.label}\n            calories={recette.recipe.calories}\n            glucides={recette.recipe.totalNutrients[\"CHOCDF\"]}\n            proteines={recette.recipe.totalNutrients[\"PROCNT\"]}\n            lipides={recette.recipe.totalNutrients[\"FAT\"]}\n            image={recette.recipe.image}\n            url={recette.recipe.url}\n            ingredients={recette.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}